<?php
namespace moxuandi\ueditor;

use Yii;
use yii\base\Action;
use yii\helpers\Json;
use moxuandi\helpers\Uploader;

/**
 * UEditor 接收上传图片控制器.
 *
 * @author zhangmoxuan <1104984259@qq.com>
 * @link http://www.zhangmoxuan.cn
 * @QQ 1104984259
 * @date 2017-7-14
 */
class UEditorAction extends Action
{
    public $config = [];  // 配置接口, 详情请查看assets/php/config.json 或 http://fex.baidu.com/ueditor/#server-config


    public function init()
    {
        Yii::$app->request->enableCsrfValidation = false;  // 关闭csrf
        $_config = require(__DIR__ . '/config.php');  // 默认上传配置
        $this->config = array_merge($_config, $this->config);
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function run()
    {
        switch(Yii::$app->request->get('action')){
            case 'config': $result = Json::encode($this->config); break;
            // 上传图片
            case 'uploadimage':
                // 上传涂鸦
            case 'uploadscrawl':
                // 上传视频
            case 'uploadvideo':
                // 上传文件
            case 'uploadfile': $result = self::actionUpload(); break;
            // 列出图片
            case 'listimage':
                // 列出文件
            case 'listfile': $result = self::actionList(); break;
            // 抓取远程图片
            case 'catchimage': $result = self::actionCrawler(); break;
            default: $result = Json::encode(['state'=>'请求地址出错']); break;
        }

        // 输出结果
        if($callback = Yii::$app->request->get('callback')){
            if(preg_match("/^[\w_]+$/", $callback)){
                echo htmlspecialchars($callback) . '(' . $result . ')';
            }else{
                echo Json::encode(['state'=>'callback 参数不合法.']);
            }
        }else{
            echo $result;
        }
    }

    /**
     * 处理上传
     * @return string
     */
    protected function actionUpload()
    {
        $base64 = 'upload';
        switch(Yii::$app->request->get('action')){
            // 上传图片
            case 'uploadimage':
                $config = [
                    'pathFormat' => $this->config['imagePathFormat'],
                    'maxSize' => $this->config['imageMaxSize'],
                    'allowFiles' => $this->config['imageAllowFiles'],
                    'thumbStatus' => $this->config['thumbStatus'],
                    'thumbWidth' => $this->config['thumbWidth'],
                    'thumbHeight' => $this->config['thumbHeight'],
                    'thumbCut' => $this->config['thumbCut'],
                ];
                $fieldName = $this->config['imageFieldName'];
                break;
            // 上传涂鸦
            case 'uploadscrawl':
                $config = [
                    'pathFormat' => $this->config['scrawlPathFormat'],
                    'maxSize' => $this->config['scrawlMaxSize'],
                    'realName' => 'scrawl.png'
                ];
                $fieldName = $this->config['scrawlFieldName'];
                $base64 = 'base64';
                break;
            // 上传视频
            case 'uploadvideo':
                $config = [
                    'pathFormat' => $this->config['videoPathFormat'],
                    'maxSize' => $this->config['videoMaxSize'],
                    'allowFiles' => $this->config['videoAllowFiles']
                ];
                $fieldName = $this->config['videoFieldName'];
                break;
            // 上传文件
            case 'uploadfile':
            default:
                $config = [
                    'pathFormat' => $this->config['filePathFormat'],
                    'maxSize' => $this->config['fileMaxSize'],
                    'allowFiles' => $this->config['fileAllowFiles']
                ];
                $fieldName = $this->config['fileFieldName'];
                break;
        }

        // 生成上传实例对象并完成上传, 返回结果数据
        $up = new Uploader($fieldName, $config, $base64, $this->config['saveDatabase']);
        return Json::encode([
            'original' => $up->realName,
            'name' => $up->fileName,
            'title' => $up->fileName,
            'url' => '/' . $up->fullName,
            'size' => $up->fileSize,
            'type' => $up->fileType,
            'state' => $up->stateInfo,
        ]);
    }

    /**
     * 列出已上传的文件列表
     * @return string
     */
    protected function actionList()
    {
        switch(Yii::$app->request->get('action')){
            // 列出文件
            case 'listfile':
                $allowFiles = $this->config['fileManagerAllowFiles'];
                $listSize = $this->config['fileManagerListSize'];
                $path = $this->config['fileManagerListPath'];
                break;
            // 列出图片
            case 'listimage':
            default:
                $allowFiles = $this->config['imageManagerAllowFiles'];
                $listSize = $this->config['imageManagerListSize'];
                $path = $this->config['imageManagerListPath'];
                break;
        }

        // 允许列出的文件类型, eg: 'png|jpg|jpeg|gif|bmp'
        $allowFiles = substr(str_replace('.', '|', join('', $allowFiles)), 1);

        // 获取参数
        $getStart = Yii::$app->request->get('start');
        $getSize = Yii::$app->request->get('size');
        $start = isset($getStart) ? htmlspecialchars($getStart) : 0;
        $size = isset($getSize) ? htmlspecialchars($getSize) : $listSize;
        $end = (int)$start + (int)$size;

        // 获取文件列表
        $path = Yii::getAlias('@webroot') . (substr($path, 0, 1) == '/' ? '' : '/') . $path;
        $files = self::getfiles($path, $allowFiles);
        $len = count($files);  // 文件总数
        if($len === 0)
            return Json::encode(['state'=>'no match file', 'list'=>[], 'start'=>$start, 'total'=>$len]);

        // 获取指定范围的列表
        for($i = min($end, $len) - 1, $list = []; $i < $len && $i >= 0 && $i >= $start; $i--){
            $list[] = $files[$i];
        }

        // 获取指定范围的列表(倒序)
        /*for($i = $end, $list = []; $i < $len && $i < $end; $i++){
            $list[] = $files[$i];
        }*/

        // 返回数据
        return Json::encode(['state'=>'SUCCESS', 'list'=>$list, 'start'=>$start, 'total'=>$len]);
    }


    /**
     * 抓取远程图片(待测试)
     */
    protected function actionCrawler()
    {
        // 上传配置
        $config = [
            'realName' => 'scrawl.png',
            'pathFormat' => $this->config['catcherPathFormat'],
            'maxSize' => $this->config['catcherMaxSize'],
            'allowFiles' => $this->config['catcherAllowFiles'],
        ];
        $fieldName = $this->config['catcherFieldName'];

        // 抓取
        $list = [];
        $source = Yii::$app->request->post($fieldName);
        foreach($source as $imgUrl){
            $item = new Uploader($imgUrl, $config, 'remote');
            array_push($list, [
                'original' => htmlspecialchars($item->realName),
                'name' => htmlspecialchars($item->fileName),
                'url' => '/' . $item->fullName,
                'size' => $item->fileSize,
                'type' => $item->fileType,
                'state' => $item->stateInfo,
                'title' => htmlspecialchars($item->fileName),
                'source' => htmlspecialchars($imgUrl)
            ]);
        }

        // 返回抓取数据
        return Json::encode(['state'=>count($list) ? 'SUCCESS' : 'ERROR', 'list'=>$list]);
    }

    /**
     * 遍历获取目录下的指定类型的文件
     * @param string $path
     * @param array $allowFiles
     * @param array $files
     * @return array|null
     */
    protected function getfiles($path, $allowFiles, &$files=[])
    {
        if(!is_dir($path))
            return null;
        if(substr($path, strlen($path) - 1) != '/')
            $path .= '/';
        $handle = opendir($path);
        while(false !== ($file = readdir($handle))){
            if(!in_array($file , ['.', '..'])){
                $path2 = $path . $file;
                if(is_dir($path2)){
                    self::getfiles($path2, $allowFiles, $files);
                }else{
                    if(preg_match('/\.(' . $allowFiles . ')$/i', $file)){
                        $files[] = ['url'=>substr($path2, strlen(Yii::getAlias('@webroot'))), 'mtime'=>filemtime($path2)];
                    }
                }
            }
        }
        return $files;
    }
}
